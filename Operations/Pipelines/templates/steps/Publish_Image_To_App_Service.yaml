# steps:
# - task: Bash@3
#   condition: ne(variables.environment, 'prod')
#   displayName: "Publish $(application) to App Service"
#   inputs:
#     targetType: 'inline'
#     script: |
#       az webapp config container set --name $(WebAppName) --resource-group $(ResourceGroupName) --docker-custom-image-name $(DockerRegistryURL)/$(repository):$(Build.BuildNumber)

steps:
- task: SSH@0
  condition: eq(variables.environment, 'staging')
  displayName: "Publish $(application) to Docker Server"
  inputs:
    sshEndpoint: 'ssh-docker-srv'
    dockerRegistryServiceConnection: 'Staging Azure Container Registry'
    runOptions: 'commands'
    commands: |
      echo "Docker version:"
      docker --version
      echo "Existing Docker images:"
      docker images
      echo $(DockerRegistryURL)/$(repository):$(Build.BuildNumber)
      echo "Logging into Azure Container Registry using token"
      echo $(ACR_ACCESS_TOKEN) | docker login crhnxstagingsoutheastasia.azurecr.io -u $(ACR_USERNAME) --password-stdin > /dev/null 2>&1
      echo "Attempting to pull the Docker image..."
      docker pull $(DockerRegistryURL)/$(repository):$(Build.BuildNumber)
#     echo "Stopping and removing existing container"
#     docker stop webapp-container || true
#     docker rm webapp-container || true
      echo "Running new Docker container"
      docker run -d --name webapp-container -p 80:80 $(DockerRegistryURL)/$(repository):$(Build.BuildNumber)
    readyTimeout: '20000'

- task: Bash@3

  condition: and(ne(variables['environment'], 'prod'), ne(variables['environment'], 'staging'))
  displayName: "Publish $(application) to App Service"
  inputs:
    targetType: 'inline'
    script: |
      az webapp config container set --name $(WebAppName) --resource-group $(ResourceGroupName) --docker-custom-image-name $(DockerRegistryURL)/$(repository):$(Build.BuildNumber)
